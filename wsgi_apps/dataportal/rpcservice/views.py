# Create your views here.
from rpc4django import rpcmethod
from cybercom.data.catalog import datalayer , dataloader
from django.contrib.auth.models import User
#this is a test
from django.contrib.auth.decorators import login_required
@login_required(login_url='/accounts/login/')
@rpcmethod(name='catalog.dtCatalog',signature=['Result: boolean', 'Param: dictionary'], permission='auth.add_group')
def catalog(row={},**kwargs):
    '''
        param - dictionary having the following attributes

        * commons_id - reference to dt_data_commons table commons_id,
        * cat_name - name of cataloged item,
        data_provider -  name of who is providing data,
        * cat_type - type of cataloged item. reference to dt_type table ,
        * loc_id - reference to dt_location,
        source_id - integer datatype can be used for misc grouping of data,
        cat_desc - Description of cataloged data,
        * cat_method - reference rt_method table. catalog method,
        observed_date - cataloged item data observation date(General)
        remark - General remarks 
        observed_year - cataloged item data observered year
        custom_field_1 - custom data for cataloged item
        custom_field_2 - custom data for cataloged item
        status_flag - A is default for Active, I Inactive
        status_data - 'Data' - metadata for data 'Application' - metadata for applications
        userid - user who cataloged data
        timestamp_created - default to Now() - When item cataloged
        
        * required fields
        returns dictionary of primary keys inserted
    '''
    request = kwargs.get('request',None)
    #check errors check permission
    try:
        c_id = int(row['commons_id'])
        checkpermission(str(request.user),c_id)
    except Exception as err:
        raise err
    #checkpermission(request,commons_id)
    md=dataloader.Metadata_load()
    return md.catalog(row)
@rpcmethod(name='catalog.EventResult',signature=['Result: JSON Success/Errors', 'Param: [row:dictionary - dt_event,evtResults:list'], permission='auth.add_group')
def dtEventResult(row={},evtResults=[],**kwargs):
    '''
    1) dt_event(row={}) 
   
       {'commons_id':"", 'event_id':"", 'cat_id':"", 'event_name':"", 'event_desc':"", 'event_method':"", 'event_date':"", 'event_type':"", 'loc_id':"", 
            'custom_1':"", 'remark':""} 
        
    2)  dt_result(result=[{},])
       {'commons_id', 'event_id', 'var_id', 'result_text', 'result_numeric', 'result_error', 'result_date', 'result_type', 
            'result_unit', 'result_order', 'stat_type', 'stat_result', 'validated', 'remark', 'status_flag'}
    '''
    result_detail=[]
    res={}
    request = kwargs.get('request',None)
    #check errors check permission
    try:
        c_id = int(row['commons_id'])
        checkpermission(str(request.user),c_id)
    except Exception as err:
        raise err

    md=dataloader.Metadata_load()
    row['userid']=str(request.user)
    #row['status_flag']='A'
    row['timestamp_created'] = datetime.datetime.now()
    methpk= md.repo_insertRow('dt_event',row)
    res['dt_event'] = methpk
    for rdict in evtResults:
        rdict['event_id']=methpk['event_id']
        result = md.repo_insertRow('dt_result',rdict)
        result_detail.append(result)
    if result_detail==[]:
        return res
    else:
        res['dt_result'] = result_detail
        return res

@rpcmethod(name='catalog.Method',signature=['Result: boolean', 'Param: dictionary'], permission='auth.add_group')
def dtMethod(row={},methDetail=[],**kwargs):
    '''
    1) rt_method(row={}) 
   
        {'method_code':"", 'method_name':"", 'method_desc':'', 'status_flag':"", 'remark':"", 'base_method':""}
        
    2)  rt_method_paramters(methDetail=[{},])
       
        {'method_code':"", 'param_type', 'param_name', 'param_desc', 'param_value'}
        'param_id': autogenerated - can be added when update is required.
    '''    
    meth_detail=[]
    res={}
    request = kwargs.get('request',None)
    #check errors check permission
    try:
        c_id = int(row['commons_id'])
        checkpermission(str(request.user),c_id)
    except Exception as err:
        raise err

    md=dataloader.Metadata_load()
    row['userid']=str(request.user)
    methpk= md.repo_insertRow('rt_method',row)
    res['rt_method'] = methpk
    for methdict in methDetail:
        methdict['method_code']=methpk['method_code']
        result = md.repo_insertRow('rt_method_parameters',methdict)
        meth_detail.append(result)
    if meth_detail==[]:
        return res
    else:
        res['rt_method_parameter']=meth_detail
        return res
@rpcmethod(name='catalog.rtVariable',signature=['Result:JSON Success/Errors', 'Param: dictionary'], permission='auth.add_group')
def rtVariable(row={},**kwargs):
    '''
    Inserts record in rt_variable  table and assigns owner of variable.
    
    Parameters:
        row - python dictionary of record to insert
    Returns
        Success JSON Success/Errors
    
    '''
    res = {}
    print "in rtVar"
    md=dataloader.Metadata_load()
    request = kwargs.get('request',None)
    #md=datalayer.Metadata()
    print request.user
    row['userid']=str(request.user)
    print row
    print "assigned userid"
    #checkuser(md,request.user)
    try:
        print "in try"
        resultpk = md.repo_insertRow('rt_variables',row)
        res['rt_variables']= resultpk
        #c_id = result.inserted_primary_key[0]
        #md.Inserts('dt_contributors',[{"commons_id" : c_id ,"people_id" : str(request.user)}])
        return res 
    except Exception as e:
        return str(e)
@rpcmethod(name='catalog.getrtVariable',signature=['Result:JSON Success/Errors', 'Param: dictionary'], permission='auth.add_group')
def getrtVariable(filter={},**kwargs):
    '''
    Inserts record in rt_variable  table and assigns owner of variable.
    
    Parameters:
        row - python dictionary of record to insert
    Returns
        Success JSON Success/Errors
    
    '''
    '''
    res = {}
    print "in rtVar"
    md=dataloader.Metadata_load()
    request = kwargs.get('request',None)
    #md=datalayer.Metadata()
    print request.user
    row['userid']=str(request.user)
    print row
    print "assigned userid"
    #checkuser(md,request.user)
    try:
        print "in try"
        resultpk = md.repo_insertRow('rt_variables',row)
        res['rt_variables']= resultpk
        #c_id = result.inserted_primary_key[0]
        #md.Inserts('dt_contributors',[{"commons_id" : c_id ,"people_id" : str(request.user)}])
        return res
    except Exception as e:
        return str(e)'''
@rpcmethod(name='catalog.Location',signature=['Result: boolean', 'Param: dictionary'], permission='auth.add_group')
def dtLocation(row={},locDetail=[],**kwargs):
    '''Description of dt_location'''
    loc_detail = []
    res = {}
    request = kwargs.get('request',None)
    #check errors check permission
    try:
        c_id = int(row['commons_id'])
        checkpermission(str(request.user),c_id)
    except Exception as err:
        raise err
    #checkpermission(request,commons_id)
    row['userid']=str(request.user)
    md=dataloader.Metadata_load()
    locpk= md.repo_insertRow('dt_location',row)
    res['dt_location']=locpk    
    for locdict in locDetail:
        locdict['loc_id']=locpk['loc_id']
        locdict['commons_id']=locpk['commons_id']
        result = md.repo_insertRow('dt_location_parameter',[locdict,])
        loc_detail.append(result)
    if loc_detail==[]:
        return res
    else:
        res['dt_location_parameter'] = loc_detail
        return res
@rpcmethod(name='catalog.dataCommons',signature=['Result: boolean', 'Param: dictionary'], permission='auth.add_group')
def dtCommons(row={},**kwargs):
    '''
    Inserts record in dt_data_commons table and assigns owner of commons to user.
    
    Parameters:
        row - python dictionary of record to insert
    Returns
        Success Boolean
    
    '''
    request = kwargs.get('request',None)
    md=datalayer.Metadata()
    checkuser(md,request.user)
    try:
        result= md.Inserts('dt_data_commons',[row])
        c_id = result.inserted_primary_key[0]
        md.Inserts('dt_contributors',[{"commons_id" : c_id ,"people_id" : str(request.user)}])
        return 'dt_data_commons received one row registered to ' + str(request.user)
    except Exception as e:
        return str(e)
    
def checkuser(md,user):
    """ Check if authorized django user has been added to the data catalog"""
    r=md.Search('dt_people',where="people_id = '" + str(user)  + "'")
    u = User.objects.get(username__exact= str(user))
    if r==[]:
        md.Inserts('dt_people',[{"people_id":str(user),"person_name":str(u.first_name + ' ' + u.last_name).strip(),"email":str(u.email)}])

def checkpermission(username,commons_id):
    md=datalayer.Metadata()
    r=md.Search('dt_contributors',where="people_id = '" + str(username)  + "' and commons_id=" + str(commons_id))
    if r==[]:
        raise Exception("Permission Error","User: " + username + " does not have write access to Data Commons( id = " + str(commons_id))
